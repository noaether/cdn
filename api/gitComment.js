const fetch=require("node-fetch"),{Configuration:Configuration,OpenAIApi:OpenAIApi}=require("openai");let configuration=new Configuration({});exports.handler=(async(t,e)=>{const{commitId:o,GITHUB_REPOSITORY:i,GITHUB_TOKEN:a,API_KEY:n}=JSON.parse(t.body),s=`https://api.github.com/repos/${i}/commits/${o}`,r={method:"GET",headers:{Authorization:`Bearer ${a}`,Accept:"application/vnd.github.v3+json","X-GitHub-Api-Version":"2022-11-28"}},c=await fetch(s,r);if(!c.ok){const t=await c.text();throw new Error(`Failed to retrieve commit: ${c.status} ${t}`)}const p=await c.json(),m=p.commit.message,h=p.files.map(t=>t.patch).join("\n");configuration=new Configuration({apiKey:n});const d=[],u=[];for(const t of h.split("\n"))t.startsWith("+")?d.push(t.substring(1)):t.startsWith("-")&&u.push(t.substring(1));let f=`You are building a Java CLI-based email client. There is a new commit '${m}' that makes the following changes:\n`;for(const t of d)f+=`+ ${t}\n`;for(const t of u)f+=`- ${t}\n`;f+="Generates a comment that describes the code changes of the new commit in a way that is appropriate for a GitHub comment. Add a quality score for the code separated by a colon. The quality score should be between 0 and 10, with 0 being bad code and 10 being very good code.",openai=new OpenAIApi(configuration),response=await openai.createCompletion({model:"text-davinci-003",prompt:f,temperature:.5,max_tokens:512,top_p:1,frequency_penalty:0,presence_penalty:.5});const l=`**Automated Commit Review** ${await response.data.choices[0].text.split(":")[0]} \n **Quality Score**: ${await response.data.choices[0].text.split(":")[1]}`,g=`https://api.github.com/repos/${i}/commits/${o}/comments`,b={method:"POST",headers:{Authorization:`Bearer ${a}`,"X-GitHub-Api-Version":"2022-11-28",Accept:"application/vnd.github.v3+json"},body:JSON.stringify({body:`${l}`})},w=await fetch(g,b);if(!w.ok){const t=await w.text();throw new Error(`Failed to generate comment: ${w.status} ${t} \n ${l}`)}return{statusCode:200,body:"Comment generated successfully!"}});